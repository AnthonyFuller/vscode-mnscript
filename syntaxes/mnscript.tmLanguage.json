{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MNScript",
	"patterns": [
		{
			"include": "#ent-class"
		},
		{
			"include": "#ent-functions"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"ent-class": {
			"contentName": "entity.name.class.mnscript",
			"begin": "class",
			"end": "\\{",
			"beginCaptures": {
				"0":{ "name": "storage.type.class.mnscript"}
			},
			"include": "#ent-functions"
		},
		"ent-functions": {
			"contentName": "entity.name.class.mnscript",
			"begin": "function<.*>|(function)",
			"end": "\\(",
			"beginCaptures": {
				"0":{ "name": "storage.type.function.mnscript"}
			},
			"include": "#main-loop"
			
		},
		"main-loop": {
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#storage"
				},
				{
					"include": "#variables"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.mnscript",
					"match": "\\b(if|while|return|using|include|else)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.mnscript",
					"match": "(?<![^.]\\.|:)\\b(false|true)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.mnscript",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.mnscript",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.line.double-slash.mnscript",
			"match": "(//).*$\\n?"
		},
		"numbers": {
			"name": "constant.numeric.mnscript",
			"match": "\\b\\d+(\\.\\d+)?"
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.mnscript",
					"match": "\\|\\||\\&\\&|==?|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)"
				},
				{
					"name": "keyword.operator.arithmetic.mnscript",
					"match": "\\+|-|%|#|\\*|\\/|\\^"
				},
				{
					"name": "keyword.operator.new.mnscript",
					"match": "\\bnew\\b"
				}
			]			
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.mnscript",
					"match": ";"
				},
				{
					"name": "punctuation.separator.delimiter.mnscript",
					"match": ","
				}
			]
		},
		"storage":{
			"patterns": [
				{
					"name":"storage.type.function.mnscript",
					"match":"function"
				},
				{
					"name":"storage.type.class.mnscript",
					"match":"class"
				},
				{
					"name":"storage.type.mnscript",
					"match": "string|number|bool|string\\[\\]|number\\[\\]|bool\\[\\]",
					"include": "#variables"
				}
			]
		},
		"variables":{
			"begin": "string|number|bool|string\\[\\]|number\\[\\]|bool\\[\\]",
			"end": ";",
			"beginCaptures": {
				"0":{ "name":"storage.type.mnscript"}
			},
			"patterns": [
				{
					"match": "(?<=\\=\\s+)[a-zA-Z\\_]+|[a-zA-Z\\_]+;|[a-zA-Z\\_]+\\s*(?=\\=)|[a-zA-Z\\_]+\\s*(?!\\))|(?<!\\()[a-zA-Z\\_]",
					"name": "variable.name.mnscript"
				}
			]			
		}
	},
	"scopeName": "source.mnscript"
}